<meta name="csrf-token" content="{{ csrf_token() }}" />
------------------------------------------------------------------------------------
<input type="hidden" name="_token" value="{{ csrf_token() }}">
------------------------------------------------------------------------------------
c1
$.ajaxSetup({
	headers: {
		'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
	        }
});

------------------------------------------------------------------------------------

     /**
     * Determine if the session and input CSRF tokens match.
     *
     * @param \Illuminate\Http\Request $request
     * @return bool
     */
    protected function tokensMatch($request)
    {
        // If request is an ajax request, then check to see if token matches token provider in
        // the header. This way, we can use CSRF protection in ajax requests also.
        $token = $request->ajax() ? $request->header('X-CSRF-Token') : $request->input('_token');

        return $request->session()->token() == $token;
    }
------------------------------------------------------------------------------------
c2
validate form modal boostrap

validate form
	$('#addUserButton').on('click',function(e){
		e.preventDefault();

		var CSRF_TOKEN = $('meta[name="csrf-token"]').attr('content');
			
		$.ajax({
				type : 'POST',
				url : "{{route('add-user')}}",
				data : {
					_token : CSRF_TOKEN,
					name: "hkjkk"
				},
				success: function(result){
					if(result.errors)
					{
						$('.alert-danger').html('');
						$.each(result.errors , function(key,value){
							$('.alert-danger').show();
							$('.alert-danger').append('<li>'+ value + '</li>');
						});
					}
					else
					{
						$('.alert-danger').hide();
						$('#modal_edit_user').modal('hide');
					}
				}
			})
		})



